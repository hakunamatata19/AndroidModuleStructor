

// Top-level build file where you can add configuration options common to all sub-projects/modules.


buildscript {
    apply from: 'versions.gradle'
    dependencies {
      /*  classpath: 'org.podval.tools.cloudrun:0.3.2'
        classpath: 'com.squareup.okhttp3:okhttp:3.14.9'*/
    }

}

plugins { //这里定义适用于所有项目的依赖项， apply false 表示当前只引入，并不使用
    id 'com.android.application' version '8.0.1' apply false
    id 'com.android.library' version '8.0.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.8.20' apply false
}

artifacts {

}

dependencies{
 // https://artifacts.iflytek.com/artifactory/mvn-repo
}
configurations {
    println("mainGradle configurations")
}

def Project currentProject =getProject()
allprojects{ current->

    println("allProjectsConfig"+current)
    println("allProjectsConfig"+current.name)
    if( "app".equals(current.name)){
        println("currentProject is APP.")
    }
}

subprojects{
    println("subprojectsConfig")
}


task clean(type:Delete){ //定义清理build目录的task
    delete rootProject.buildDir
}



class MyPluginClass implements Plugin<Project>{

    @Override
    void apply(Project target) {
        println("UserMyPluginCLass "+target.name)

        target.task('printCurrentTaskInfo'){
            doFirst{
                println("UserMyPluginCLass projectPath:"+target.path)
            }
            doLast{
                println("UserMyPluginCLass projectName:"+target.name)
                println("UserMyPluginCLass projectPath:"+target.getPath())
                println("UserMyPluginCLass projectResources:"+target.resources)
            }
        }
    }
}
/************************************/
abstract  class GreetingToFileTask extends  DefaultTask{
    @OutputFile
    abstract  org.gradle.api.file.RegularFileProperty getDestination()

    @TaskAction
    def greet(){
        def file = getDestination().get().asFile
        file.parentFile.mkdirs()
        file.write("Hello, this is from Gradle")

    }

}
def greetingFile = objects.fileProperty()

tasks.register("greet", GreetingToFileTask){
    destination = greetingFile
}

tasks.register("sayGreeting"){
    dependsOn greet
    doLast{
        def file = greetingFile.get().asFile
        println("filePath:${file.absolutePath}")
        println "${file.text} (file: ${file.name})"
    }
}
greetingFile.set(layout.buildDirectory.file("hello.txt"))



