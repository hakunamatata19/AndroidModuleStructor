plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.coocaa.release'
    id 'kotlin-kapt'
}
java {
    toolchain{
        languageVersion = JavaLanguageVersion.of(17)  //这里是指定用哪一个版本的JDK来编译 java或者kotlin远吗
    }
}
println("ideaPlugin: ")
android {
    signingConfigs { //添加一个签名版本信息
        release {
            storeFile file('./../keystore/letwindsgo.keystore')
            storePassword 'letwindsgo'
            keyAlias 'letwindsgo'
            keyPassword 'letwindsgo'
        }
    }
    namespace 'com.chen.agp'
    compileSdk build_versions.compile_sdk

    defaultConfig {
        minSdk build_versions.min_sdk
        targetSdk build_versions.target_sdk

        multiDexEnabled true


        versionCode app_config.version_code
        versionName app_config.version_name

        applicationId "com.chen.agp"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug{
            signingConfig signingConfigs.release
        }
      /*  factory { //生产环境，基本和release一致
            minifyEnabled true

        }*/
        getByName("release") {
            println("AppBuildGradle")
        }
        getByName("debug") {
            applicationIdSuffix ".debug"
            println "AppBuildGradle debug"
            manifestPlaceholders = [hostName:"internal.example.com"]
        }

    }
    variantFilter{ //针对各个变体进行遍历配置
        varient->
        println("variantFilterVarient:"+varient.buildType.name)

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17 //这里决定在编译的时候，代码可以用到哪一个版本的java api
        targetCompatibility JavaVersion.VERSION_17 //生成的class文件用的是哪一个版本形式这个必须大于等于 sourceCompatibility
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    //dynamicFeatures = [':dynamicfeature']

 buildFeatures{
     dataBinding = true
     viewBinding = true
 }
}
configurations {
    cleanedAnnotations
    implementation.exclude group: 'org.jetbrains', module: 'annotations'
}

dependencies {

    implementation(libs.adnroidKotlin)
    implementation(libs.bundles.base.dependencies)
    implementation(libs.multidex)
    implementation(libs.paging.runtime)
    testImplementation(libs.paging.common)
    api project(':base_view')
    api project(':base_data')
    api project(':base_bean')

    implementation fileTree(dir:"libs", includes: ['*.jar'])



    implementation(libs.bundles.androidx.room)
    kapt (libs.roomCompiler)

    /*  implementation 'androidx.core:core-ktx:1.8.0'
      implementation 'androidx.appcompat:appcompat:1.6.1'
      implementation 'com.google.android.material:material:1.5.0'
      implementation 'androidx.constraintlayout:constraintlayout:2.1.4'*/
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

project.afterEvaluate{ //配置任务，将当前任务依赖 pluginActivity任务
    gradle.getGradle().startParameter.each {param->
        println ("currentValue: ${param.metaPropertyValues}")
        param.metaPropertyValues.forEach{prop-> //可以通过这些参数来判断当前任务是release还是debug
            println("propValue:${prop.name}, value:${prop.value}")
        }

    }
    if(isReleaseBuildType()){
        return
    }
    project.tasks.each {tmpTask->

        if(tmpTask.name == 'mergeDebugAssets'){
           tmpTask.configure {
               tmpTask.dependsOn ':pluginactivity:assembleDebug'
           }
        }
    }
}
boolean isReleaseBuildType(){
    for(String s : gradle.startParameter.taskNames) {
        if (s.contains("Release") | s.contains("release")) {
            return true
        }
    }
    return false
}