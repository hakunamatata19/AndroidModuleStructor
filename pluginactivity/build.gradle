
import org.gradle.util.internal.TextUtil

/**
 * 一个简单的插件测试功能，生成插件APk并且将当前生成的APK复制到App的Assets目录下，
 * 这样主 apk就可以load插件APk的class，并且进行Activity替换
 *
 * */


plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.chen.pluginactivity'
    compileSdk build_versions.compile_sdk

    defaultConfig {
        applicationId "com.chen.pluginactivity"
        minSdk build_versions.min_sdk
        targetSdk build_versions.target_sdk

        versionCode build_versions.plugin_vcode
        versionName build_versions.plugin_vname

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation(libs.adnroidKotlin)
    implementation(libs.bundles.base.dependencies)
    implementation(libs.bundles.androidx.room)
    kapt (libs.roomCompiler)


    implementation(libs.multidex)
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
def copyFileTask = project.task("copyFile"){ //定义一个 copyFile任务
    println("doingCopyTask.")
    copy{
        from new File(project.getBuildDir(), 'outputs/apk/debug/pluginactivity-debug.apk').absolutePath
        into new File(project.getRootProject().getProjectDir(), 'app/src/main/assets')
        rename 'pluginactivity-debug.apk', 'plugin.apk'
    }
}

project.afterEvaluate{
    project.tasks.each { tmpTask->
      //  println("currentTaskName: "+tmpTask.name)
        if(tmpTask.name=="assembleDebug"||  tmpTask.name=="assembleRelease" ){ //判断需要执行的任务，然后给这个任务添加一个finalizedBy任务
         //第一种形式：
            tmpTask.configure {
                finalizedBy copyFileTask
            }
            // 第二种形式：
            tmpTask.configure {
                doLast{

                }
            }
        }

    }
}